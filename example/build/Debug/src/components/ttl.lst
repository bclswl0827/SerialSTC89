                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module ttl
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _putchar
                                     12 	.globl _SerialAvailable
                                     13 	.globl _SerialRead
                                     14 	.globl _SerialPrintln
                                     15 	.globl _SerialPrint
                                     16 	.globl _SerialWrite
                                     17 	.globl _SerialFlush
                                     18 	.globl _SerialSetTimeout
                                     19 	.globl _SerialEnd
                                     20 	.globl _SerialBegin
                                     21 	.globl _CP_RL2
                                     22 	.globl _C_T2
                                     23 	.globl _TR2
                                     24 	.globl _EXEN2
                                     25 	.globl _TCLK
                                     26 	.globl _RCLK
                                     27 	.globl _EXF2
                                     28 	.globl _TF2
                                     29 	.globl _T2
                                     30 	.globl _T2EX
                                     31 	.globl _RI
                                     32 	.globl _TI
                                     33 	.globl _RB8
                                     34 	.globl _TB8
                                     35 	.globl _REN
                                     36 	.globl _SM2
                                     37 	.globl _SM1
                                     38 	.globl _SM0
                                     39 	.globl _RXD
                                     40 	.globl _TXD
                                     41 	.globl _INT0
                                     42 	.globl _INT1
                                     43 	.globl _T0
                                     44 	.globl _T1
                                     45 	.globl _WR
                                     46 	.globl _RD
                                     47 	.globl _PX0
                                     48 	.globl _PT0
                                     49 	.globl _PX1
                                     50 	.globl _PT1
                                     51 	.globl _PS
                                     52 	.globl _PT2
                                     53 	.globl _EX0
                                     54 	.globl _ET0
                                     55 	.globl _EX1
                                     56 	.globl _ET1
                                     57 	.globl _ES
                                     58 	.globl _ET2
                                     59 	.globl _EA
                                     60 	.globl _IT0
                                     61 	.globl _IE0
                                     62 	.globl _IT1
                                     63 	.globl _IE1
                                     64 	.globl _TR0
                                     65 	.globl _TF0
                                     66 	.globl _TR1
                                     67 	.globl _TF1
                                     68 	.globl _P
                                     69 	.globl _OV
                                     70 	.globl _RS0
                                     71 	.globl _RS1
                                     72 	.globl _F0
                                     73 	.globl _AC
                                     74 	.globl _CY
                                     75 	.globl _P37
                                     76 	.globl _P36
                                     77 	.globl _P35
                                     78 	.globl _P34
                                     79 	.globl _P33
                                     80 	.globl _P32
                                     81 	.globl _P31
                                     82 	.globl _P30
                                     83 	.globl _P27
                                     84 	.globl _P26
                                     85 	.globl _P25
                                     86 	.globl _P24
                                     87 	.globl _P23
                                     88 	.globl _P22
                                     89 	.globl _P21
                                     90 	.globl _P20
                                     91 	.globl _P17
                                     92 	.globl _P16
                                     93 	.globl _P15
                                     94 	.globl _P14
                                     95 	.globl _P13
                                     96 	.globl _P12
                                     97 	.globl _P11
                                     98 	.globl _P10
                                     99 	.globl _P07
                                    100 	.globl _P06
                                    101 	.globl _P05
                                    102 	.globl _P04
                                    103 	.globl _P03
                                    104 	.globl _P02
                                    105 	.globl _P01
                                    106 	.globl _P00
                                    107 	.globl _TH2
                                    108 	.globl _TL2
                                    109 	.globl _RCAP2H
                                    110 	.globl _RCAP2L
                                    111 	.globl _T2CON
                                    112 	.globl _SBUF
                                    113 	.globl _SCON
                                    114 	.globl _IP
                                    115 	.globl _IE
                                    116 	.globl _TH1
                                    117 	.globl _TH0
                                    118 	.globl _TL1
                                    119 	.globl _TL0
                                    120 	.globl _TMOD
                                    121 	.globl _TCON
                                    122 	.globl _PCON
                                    123 	.globl _DPH
                                    124 	.globl _DPL
                                    125 	.globl _SP
                                    126 	.globl _B
                                    127 	.globl _ACC
                                    128 	.globl _PSW
                                    129 	.globl _P3
                                    130 	.globl _P2
                                    131 	.globl _P1
                                    132 	.globl _P0
                                    133 ;--------------------------------------------------------
                                    134 ; special function registers
                                    135 ;--------------------------------------------------------
                                    136 	.area RSEG    (ABS,DATA)
      000000                        137 	.org 0x0000
                           000080   138 G$P0$0_0$0 == 0x0080
                           000080   139 _P0	=	0x0080
                           000090   140 G$P1$0_0$0 == 0x0090
                           000090   141 _P1	=	0x0090
                           0000A0   142 G$P2$0_0$0 == 0x00a0
                           0000A0   143 _P2	=	0x00a0
                           0000B0   144 G$P3$0_0$0 == 0x00b0
                           0000B0   145 _P3	=	0x00b0
                           0000D0   146 G$PSW$0_0$0 == 0x00d0
                           0000D0   147 _PSW	=	0x00d0
                           0000E0   148 G$ACC$0_0$0 == 0x00e0
                           0000E0   149 _ACC	=	0x00e0
                           0000F0   150 G$B$0_0$0 == 0x00f0
                           0000F0   151 _B	=	0x00f0
                           000081   152 G$SP$0_0$0 == 0x0081
                           000081   153 _SP	=	0x0081
                           000082   154 G$DPL$0_0$0 == 0x0082
                           000082   155 _DPL	=	0x0082
                           000083   156 G$DPH$0_0$0 == 0x0083
                           000083   157 _DPH	=	0x0083
                           000087   158 G$PCON$0_0$0 == 0x0087
                           000087   159 _PCON	=	0x0087
                           000088   160 G$TCON$0_0$0 == 0x0088
                           000088   161 _TCON	=	0x0088
                           000089   162 G$TMOD$0_0$0 == 0x0089
                           000089   163 _TMOD	=	0x0089
                           00008A   164 G$TL0$0_0$0 == 0x008a
                           00008A   165 _TL0	=	0x008a
                           00008B   166 G$TL1$0_0$0 == 0x008b
                           00008B   167 _TL1	=	0x008b
                           00008C   168 G$TH0$0_0$0 == 0x008c
                           00008C   169 _TH0	=	0x008c
                           00008D   170 G$TH1$0_0$0 == 0x008d
                           00008D   171 _TH1	=	0x008d
                           0000A8   172 G$IE$0_0$0 == 0x00a8
                           0000A8   173 _IE	=	0x00a8
                           0000B8   174 G$IP$0_0$0 == 0x00b8
                           0000B8   175 _IP	=	0x00b8
                           000098   176 G$SCON$0_0$0 == 0x0098
                           000098   177 _SCON	=	0x0098
                           000099   178 G$SBUF$0_0$0 == 0x0099
                           000099   179 _SBUF	=	0x0099
                           0000C8   180 G$T2CON$0_0$0 == 0x00c8
                           0000C8   181 _T2CON	=	0x00c8
                           0000CA   182 G$RCAP2L$0_0$0 == 0x00ca
                           0000CA   183 _RCAP2L	=	0x00ca
                           0000CB   184 G$RCAP2H$0_0$0 == 0x00cb
                           0000CB   185 _RCAP2H	=	0x00cb
                           0000CC   186 G$TL2$0_0$0 == 0x00cc
                           0000CC   187 _TL2	=	0x00cc
                           0000CD   188 G$TH2$0_0$0 == 0x00cd
                           0000CD   189 _TH2	=	0x00cd
                                    190 ;--------------------------------------------------------
                                    191 ; special function bits
                                    192 ;--------------------------------------------------------
                                    193 	.area RSEG    (ABS,DATA)
      000000                        194 	.org 0x0000
                           000080   195 G$P00$0_0$0 == 0x0080
                           000080   196 _P00	=	0x0080
                           000081   197 G$P01$0_0$0 == 0x0081
                           000081   198 _P01	=	0x0081
                           000082   199 G$P02$0_0$0 == 0x0082
                           000082   200 _P02	=	0x0082
                           000083   201 G$P03$0_0$0 == 0x0083
                           000083   202 _P03	=	0x0083
                           000084   203 G$P04$0_0$0 == 0x0084
                           000084   204 _P04	=	0x0084
                           000085   205 G$P05$0_0$0 == 0x0085
                           000085   206 _P05	=	0x0085
                           000086   207 G$P06$0_0$0 == 0x0086
                           000086   208 _P06	=	0x0086
                           000087   209 G$P07$0_0$0 == 0x0087
                           000087   210 _P07	=	0x0087
                           000090   211 G$P10$0_0$0 == 0x0090
                           000090   212 _P10	=	0x0090
                           000091   213 G$P11$0_0$0 == 0x0091
                           000091   214 _P11	=	0x0091
                           000092   215 G$P12$0_0$0 == 0x0092
                           000092   216 _P12	=	0x0092
                           000093   217 G$P13$0_0$0 == 0x0093
                           000093   218 _P13	=	0x0093
                           000094   219 G$P14$0_0$0 == 0x0094
                           000094   220 _P14	=	0x0094
                           000095   221 G$P15$0_0$0 == 0x0095
                           000095   222 _P15	=	0x0095
                           000096   223 G$P16$0_0$0 == 0x0096
                           000096   224 _P16	=	0x0096
                           000097   225 G$P17$0_0$0 == 0x0097
                           000097   226 _P17	=	0x0097
                           0000A0   227 G$P20$0_0$0 == 0x00a0
                           0000A0   228 _P20	=	0x00a0
                           0000A1   229 G$P21$0_0$0 == 0x00a1
                           0000A1   230 _P21	=	0x00a1
                           0000A2   231 G$P22$0_0$0 == 0x00a2
                           0000A2   232 _P22	=	0x00a2
                           0000A3   233 G$P23$0_0$0 == 0x00a3
                           0000A3   234 _P23	=	0x00a3
                           0000A4   235 G$P24$0_0$0 == 0x00a4
                           0000A4   236 _P24	=	0x00a4
                           0000A5   237 G$P25$0_0$0 == 0x00a5
                           0000A5   238 _P25	=	0x00a5
                           0000A6   239 G$P26$0_0$0 == 0x00a6
                           0000A6   240 _P26	=	0x00a6
                           0000A7   241 G$P27$0_0$0 == 0x00a7
                           0000A7   242 _P27	=	0x00a7
                           0000B0   243 G$P30$0_0$0 == 0x00b0
                           0000B0   244 _P30	=	0x00b0
                           0000B1   245 G$P31$0_0$0 == 0x00b1
                           0000B1   246 _P31	=	0x00b1
                           0000B2   247 G$P32$0_0$0 == 0x00b2
                           0000B2   248 _P32	=	0x00b2
                           0000B3   249 G$P33$0_0$0 == 0x00b3
                           0000B3   250 _P33	=	0x00b3
                           0000B4   251 G$P34$0_0$0 == 0x00b4
                           0000B4   252 _P34	=	0x00b4
                           0000B5   253 G$P35$0_0$0 == 0x00b5
                           0000B5   254 _P35	=	0x00b5
                           0000B6   255 G$P36$0_0$0 == 0x00b6
                           0000B6   256 _P36	=	0x00b6
                           0000B7   257 G$P37$0_0$0 == 0x00b7
                           0000B7   258 _P37	=	0x00b7
                           0000D7   259 G$CY$0_0$0 == 0x00d7
                           0000D7   260 _CY	=	0x00d7
                           0000D6   261 G$AC$0_0$0 == 0x00d6
                           0000D6   262 _AC	=	0x00d6
                           0000D5   263 G$F0$0_0$0 == 0x00d5
                           0000D5   264 _F0	=	0x00d5
                           0000D4   265 G$RS1$0_0$0 == 0x00d4
                           0000D4   266 _RS1	=	0x00d4
                           0000D3   267 G$RS0$0_0$0 == 0x00d3
                           0000D3   268 _RS0	=	0x00d3
                           0000D2   269 G$OV$0_0$0 == 0x00d2
                           0000D2   270 _OV	=	0x00d2
                           0000D0   271 G$P$0_0$0 == 0x00d0
                           0000D0   272 _P	=	0x00d0
                           00008F   273 G$TF1$0_0$0 == 0x008f
                           00008F   274 _TF1	=	0x008f
                           00008E   275 G$TR1$0_0$0 == 0x008e
                           00008E   276 _TR1	=	0x008e
                           00008D   277 G$TF0$0_0$0 == 0x008d
                           00008D   278 _TF0	=	0x008d
                           00008C   279 G$TR0$0_0$0 == 0x008c
                           00008C   280 _TR0	=	0x008c
                           00008B   281 G$IE1$0_0$0 == 0x008b
                           00008B   282 _IE1	=	0x008b
                           00008A   283 G$IT1$0_0$0 == 0x008a
                           00008A   284 _IT1	=	0x008a
                           000089   285 G$IE0$0_0$0 == 0x0089
                           000089   286 _IE0	=	0x0089
                           000088   287 G$IT0$0_0$0 == 0x0088
                           000088   288 _IT0	=	0x0088
                           0000AF   289 G$EA$0_0$0 == 0x00af
                           0000AF   290 _EA	=	0x00af
                           0000AD   291 G$ET2$0_0$0 == 0x00ad
                           0000AD   292 _ET2	=	0x00ad
                           0000AC   293 G$ES$0_0$0 == 0x00ac
                           0000AC   294 _ES	=	0x00ac
                           0000AB   295 G$ET1$0_0$0 == 0x00ab
                           0000AB   296 _ET1	=	0x00ab
                           0000AA   297 G$EX1$0_0$0 == 0x00aa
                           0000AA   298 _EX1	=	0x00aa
                           0000A9   299 G$ET0$0_0$0 == 0x00a9
                           0000A9   300 _ET0	=	0x00a9
                           0000A8   301 G$EX0$0_0$0 == 0x00a8
                           0000A8   302 _EX0	=	0x00a8
                           0000BD   303 G$PT2$0_0$0 == 0x00bd
                           0000BD   304 _PT2	=	0x00bd
                           0000BC   305 G$PS$0_0$0 == 0x00bc
                           0000BC   306 _PS	=	0x00bc
                           0000BB   307 G$PT1$0_0$0 == 0x00bb
                           0000BB   308 _PT1	=	0x00bb
                           0000BA   309 G$PX1$0_0$0 == 0x00ba
                           0000BA   310 _PX1	=	0x00ba
                           0000B9   311 G$PT0$0_0$0 == 0x00b9
                           0000B9   312 _PT0	=	0x00b9
                           0000B8   313 G$PX0$0_0$0 == 0x00b8
                           0000B8   314 _PX0	=	0x00b8
                           0000B7   315 G$RD$0_0$0 == 0x00b7
                           0000B7   316 _RD	=	0x00b7
                           0000B6   317 G$WR$0_0$0 == 0x00b6
                           0000B6   318 _WR	=	0x00b6
                           0000B5   319 G$T1$0_0$0 == 0x00b5
                           0000B5   320 _T1	=	0x00b5
                           0000B4   321 G$T0$0_0$0 == 0x00b4
                           0000B4   322 _T0	=	0x00b4
                           0000B3   323 G$INT1$0_0$0 == 0x00b3
                           0000B3   324 _INT1	=	0x00b3
                           0000B2   325 G$INT0$0_0$0 == 0x00b2
                           0000B2   326 _INT0	=	0x00b2
                           0000B1   327 G$TXD$0_0$0 == 0x00b1
                           0000B1   328 _TXD	=	0x00b1
                           0000B0   329 G$RXD$0_0$0 == 0x00b0
                           0000B0   330 _RXD	=	0x00b0
                           00009F   331 G$SM0$0_0$0 == 0x009f
                           00009F   332 _SM0	=	0x009f
                           00009E   333 G$SM1$0_0$0 == 0x009e
                           00009E   334 _SM1	=	0x009e
                           00009D   335 G$SM2$0_0$0 == 0x009d
                           00009D   336 _SM2	=	0x009d
                           00009C   337 G$REN$0_0$0 == 0x009c
                           00009C   338 _REN	=	0x009c
                           00009B   339 G$TB8$0_0$0 == 0x009b
                           00009B   340 _TB8	=	0x009b
                           00009A   341 G$RB8$0_0$0 == 0x009a
                           00009A   342 _RB8	=	0x009a
                           000099   343 G$TI$0_0$0 == 0x0099
                           000099   344 _TI	=	0x0099
                           000098   345 G$RI$0_0$0 == 0x0098
                           000098   346 _RI	=	0x0098
                           000091   347 G$T2EX$0_0$0 == 0x0091
                           000091   348 _T2EX	=	0x0091
                           000090   349 G$T2$0_0$0 == 0x0090
                           000090   350 _T2	=	0x0090
                           0000CF   351 G$TF2$0_0$0 == 0x00cf
                           0000CF   352 _TF2	=	0x00cf
                           0000CE   353 G$EXF2$0_0$0 == 0x00ce
                           0000CE   354 _EXF2	=	0x00ce
                           0000CD   355 G$RCLK$0_0$0 == 0x00cd
                           0000CD   356 _RCLK	=	0x00cd
                           0000CC   357 G$TCLK$0_0$0 == 0x00cc
                           0000CC   358 _TCLK	=	0x00cc
                           0000CB   359 G$EXEN2$0_0$0 == 0x00cb
                           0000CB   360 _EXEN2	=	0x00cb
                           0000CA   361 G$TR2$0_0$0 == 0x00ca
                           0000CA   362 _TR2	=	0x00ca
                           0000C9   363 G$C_T2$0_0$0 == 0x00c9
                           0000C9   364 _C_T2	=	0x00c9
                           0000C8   365 G$CP_RL2$0_0$0 == 0x00c8
                           0000C8   366 _CP_RL2	=	0x00c8
                                    367 ;--------------------------------------------------------
                                    368 ; overlayable register banks
                                    369 ;--------------------------------------------------------
                                    370 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        371 	.ds 8
                                    372 ;--------------------------------------------------------
                                    373 ; internal ram data
                                    374 ;--------------------------------------------------------
                                    375 	.area DSEG    (DATA)
                                    376 ;--------------------------------------------------------
                                    377 ; overlayable items in internal ram 
                                    378 ;--------------------------------------------------------
                                    379 	.area	OSEG    (OVR,DATA)
                                    380 	.area	OSEG    (OVR,DATA)
                                    381 ;--------------------------------------------------------
                                    382 ; indirectly addressable internal ram data
                                    383 ;--------------------------------------------------------
                                    384 	.area ISEG    (DATA)
                                    385 ;--------------------------------------------------------
                                    386 ; absolute internal ram data
                                    387 ;--------------------------------------------------------
                                    388 	.area IABS    (ABS,DATA)
                                    389 	.area IABS    (ABS,DATA)
                                    390 ;--------------------------------------------------------
                                    391 ; bit data
                                    392 ;--------------------------------------------------------
                                    393 	.area BSEG    (BIT)
                                    394 ;--------------------------------------------------------
                                    395 ; paged external ram data
                                    396 ;--------------------------------------------------------
                                    397 	.area PSEG    (PAG,XDATA)
                                    398 ;--------------------------------------------------------
                                    399 ; external ram data
                                    400 ;--------------------------------------------------------
                                    401 	.area XSEG    (XDATA)
                                    402 ;--------------------------------------------------------
                                    403 ; absolute external ram data
                                    404 ;--------------------------------------------------------
                                    405 	.area XABS    (ABS,XDATA)
                                    406 ;--------------------------------------------------------
                                    407 ; external initialized ram data
                                    408 ;--------------------------------------------------------
                                    409 	.area XISEG   (XDATA)
                                    410 	.area HOME    (CODE)
                                    411 	.area GSINIT0 (CODE)
                                    412 	.area GSINIT1 (CODE)
                                    413 	.area GSINIT2 (CODE)
                                    414 	.area GSINIT3 (CODE)
                                    415 	.area GSINIT4 (CODE)
                                    416 	.area GSINIT5 (CODE)
                                    417 	.area GSINIT  (CODE)
                                    418 	.area GSFINAL (CODE)
                                    419 	.area CSEG    (CODE)
                                    420 ;--------------------------------------------------------
                                    421 ; global & static initialisations
                                    422 ;--------------------------------------------------------
                                    423 	.area HOME    (CODE)
                                    424 	.area GSINIT  (CODE)
                                    425 	.area GSFINAL (CODE)
                                    426 	.area GSINIT  (CODE)
                                    427 ;--------------------------------------------------------
                                    428 ; Home
                                    429 ;--------------------------------------------------------
                                    430 	.area HOME    (CODE)
                                    431 	.area HOME    (CODE)
                                    432 ;--------------------------------------------------------
                                    433 ; code
                                    434 ;--------------------------------------------------------
                                    435 	.area CSEG    (CODE)
                                    436 ;------------------------------------------------------------
                                    437 ;Allocation info for local variables in function 'SerialBegin'
                                    438 ;------------------------------------------------------------
                                    439 ;b                         Allocated to registers r6 r7 
                                    440 ;------------------------------------------------------------
                           000000   441 	G$SerialBegin$0$0 ==.
                           000000   442 	C$ttl.c$8$0_0$2 ==.
                                    443 ;	./src/components/ttl.c:8: void SerialBegin(uint16_t b) {
                                    444 ;	-----------------------------------------
                                    445 ;	 function SerialBegin
                                    446 ;	-----------------------------------------
      000000                        447 _SerialBegin:
                           000007   448 	ar7 = 0x07
                           000006   449 	ar6 = 0x06
                           000005   450 	ar5 = 0x05
                           000004   451 	ar4 = 0x04
                           000003   452 	ar3 = 0x03
                           000002   453 	ar2 = 0x02
                           000001   454 	ar1 = 0x01
                           000000   455 	ar0 = 0x00
      000000 AE 82            [24]  456 	mov	r6,dpl
      000002 AF 83            [24]  457 	mov	r7,dph
                           000004   458 	C$ttl.c$10$1_0$2 ==.
                                    459 ;	./src/components/ttl.c:10: PCON = 0x80;
      000004 75 87 80         [24]  460 	mov	_PCON,#0x80
                           000007   461 	C$ttl.c$12$1_0$2 ==.
                                    462 ;	./src/components/ttl.c:12: SCON = 0x50;
      000007 75 98 50         [24]  463 	mov	_SCON,#0x50
                           00000A   464 	C$ttl.c$14$1_0$2 ==.
                                    465 ;	./src/components/ttl.c:14: TMOD = 0x20;
      00000A 75 89 20         [24]  466 	mov	_TMOD,#0x20
                           00000D   467 	C$ttl.c$16$1_0$2 ==.
                                    468 ;	./src/components/ttl.c:16: TH1 = TL1 = -(CRYSTAL / 12 / 32 / (b / 2));
      00000D EF               [12]  469 	mov	a,r7
      00000E C3               [12]  470 	clr	c
      00000F 13               [12]  471 	rrc	a
      000010 CE               [12]  472 	xch	a,r6
      000011 13               [12]  473 	rrc	a
      000012 CE               [12]  474 	xch	a,r6
      000013 FF               [12]  475 	mov	r7,a
      000014 8E*00            [24]  476 	mov	__divslong_PARM_2,r6
      000016 8F*01            [24]  477 	mov	(__divslong_PARM_2 + 1),r7
      000018 75*02 00         [24]  478 	mov	(__divslong_PARM_2 + 2),#0x00
      00001B 75*03 00         [24]  479 	mov	(__divslong_PARM_2 + 3),#0x00
      00001E 90 70 80         [24]  480 	mov	dptr,#0x7080
      000021 E4               [12]  481 	clr	a
      000022 F5 F0            [12]  482 	mov	b,a
      000024 12r00r00         [24]  483 	lcall	__divslong
      000027 AC 82            [24]  484 	mov	r4,dpl
      000029 C3               [12]  485 	clr	c
      00002A E4               [12]  486 	clr	a
      00002B 9C               [12]  487 	subb	a,r4
      00002C FC               [12]  488 	mov	r4,a
      00002D 8C 8B            [24]  489 	mov	_TL1,r4
      00002F 8C 8D            [24]  490 	mov	_TH1,r4
                           000031   491 	C$ttl.c$18$1_0$2 ==.
                                    492 ;	./src/components/ttl.c:18: TR1 = EA = ES = 1;
                                    493 ;	assignBit
      000031 D2 AC            [12]  494 	setb	_ES
                                    495 ;	assignBit
      000033 A2 AC            [12]  496 	mov	c,_ES
      000035 92 AF            [24]  497 	mov	_EA,c
                                    498 ;	assignBit
      000037 A2 AF            [12]  499 	mov	c,_EA
      000039 92 8E            [24]  500 	mov	_TR1,c
                           00003B   501 	C$ttl.c$19$1_0$2 ==.
                                    502 ;	./src/components/ttl.c:19: }
                           00003B   503 	C$ttl.c$19$1_0$2 ==.
                           00003B   504 	XG$SerialBegin$0$0 ==.
      00003B 22               [24]  505 	ret
                                    506 ;------------------------------------------------------------
                                    507 ;Allocation info for local variables in function 'SerialEnd'
                                    508 ;------------------------------------------------------------
                           00003C   509 	G$SerialEnd$0$0 ==.
                           00003C   510 	C$ttl.c$22$1_0$3 ==.
                                    511 ;	./src/components/ttl.c:22: void SerialEnd() {
                                    512 ;	-----------------------------------------
                                    513 ;	 function SerialEnd
                                    514 ;	-----------------------------------------
      00003C                        515 _SerialEnd:
                           00003C   516 	C$ttl.c$24$1_0$3 ==.
                                    517 ;	./src/components/ttl.c:24: EA = ES = 0;
                                    518 ;	assignBit
      00003C C2 AC            [12]  519 	clr	_ES
                                    520 ;	assignBit
      00003E A2 AC            [12]  521 	mov	c,_ES
      000040 92 AF            [24]  522 	mov	_EA,c
                           000042   523 	C$ttl.c$25$1_0$3 ==.
                                    524 ;	./src/components/ttl.c:25: }
                           000042   525 	C$ttl.c$25$1_0$3 ==.
                           000042   526 	XG$SerialEnd$0$0 ==.
      000042 22               [24]  527 	ret
                                    528 ;------------------------------------------------------------
                                    529 ;Allocation info for local variables in function 'SerialSetTimeout'
                                    530 ;------------------------------------------------------------
                                    531 ;t                         Allocated to registers r6 r7 
                                    532 ;------------------------------------------------------------
                           000043   533 	G$SerialSetTimeout$0$0 ==.
                           000043   534 	C$ttl.c$28$1_0$5 ==.
                                    535 ;	./src/components/ttl.c:28: void SerialSetTimeout(uint16_t t) {
                                    536 ;	-----------------------------------------
                                    537 ;	 function SerialSetTimeout
                                    538 ;	-----------------------------------------
      000043                        539 _SerialSetTimeout:
      000043 AE 82            [24]  540 	mov	r6,dpl
      000045 AF 83            [24]  541 	mov	r7,dph
                           000047   542 	C$ttl.c$30$1_0$5 ==.
                                    543 ;	./src/components/ttl.c:30: TMOD = 0x01;
      000047 75 89 01         [24]  544 	mov	_TMOD,#0x01
                           00004A   545 	C$ttl.c$32$1_0$5 ==.
                                    546 ;	./src/components/ttl.c:32: TH0 = (t >> 8) & 0xff;
      00004A 8F 8C            [24]  547 	mov	_TH0,r7
                           00004C   548 	C$ttl.c$33$1_0$5 ==.
                                    549 ;	./src/components/ttl.c:33: TL0 = t & 0xff;
      00004C 8E 8A            [24]  550 	mov	_TL0,r6
                           00004E   551 	C$ttl.c$35$1_0$5 ==.
                                    552 ;	./src/components/ttl.c:35: TR0 = EA = ET0 = 1;
                                    553 ;	assignBit
      00004E D2 A9            [12]  554 	setb	_ET0
                                    555 ;	assignBit
      000050 A2 A9            [12]  556 	mov	c,_ET0
      000052 92 AF            [24]  557 	mov	_EA,c
                                    558 ;	assignBit
      000054 A2 AF            [12]  559 	mov	c,_EA
      000056 92 8C            [24]  560 	mov	_TR0,c
                           000058   561 	C$ttl.c$36$1_0$5 ==.
                                    562 ;	./src/components/ttl.c:36: }
                           000058   563 	C$ttl.c$36$1_0$5 ==.
                           000058   564 	XG$SerialSetTimeout$0$0 ==.
      000058 22               [24]  565 	ret
                                    566 ;------------------------------------------------------------
                                    567 ;Allocation info for local variables in function 'SerialFlush'
                                    568 ;------------------------------------------------------------
                           000059   569 	G$SerialFlush$0$0 ==.
                           000059   570 	C$ttl.c$39$1_0$6 ==.
                                    571 ;	./src/components/ttl.c:39: void SerialFlush() {
                                    572 ;	-----------------------------------------
                                    573 ;	 function SerialFlush
                                    574 ;	-----------------------------------------
      000059                        575 _SerialFlush:
                           000059   576 	C$ttl.c$41$1_0$6 ==.
                                    577 ;	./src/components/ttl.c:41: while (!TI) {
      000059                        578 00101$:
                           000059   579 	C$ttl.c$45$1_0$6 ==.
                                    580 ;	./src/components/ttl.c:45: TI = 0;
                                    581 ;	assignBit
      000059 10 99 02         [24]  582 	jbc	_TI,00114$
      00005C 80 FB            [24]  583 	sjmp	00101$
      00005E                        584 00114$:
                           00005E   585 	C$ttl.c$46$1_0$6 ==.
                                    586 ;	./src/components/ttl.c:46: }
                           00005E   587 	C$ttl.c$46$1_0$6 ==.
                           00005E   588 	XG$SerialFlush$0$0 ==.
      00005E 22               [24]  589 	ret
                                    590 ;------------------------------------------------------------
                                    591 ;Allocation info for local variables in function 'SerialWrite'
                                    592 ;------------------------------------------------------------
                                    593 ;c                         Allocated to registers r7 
                                    594 ;------------------------------------------------------------
                           00005F   595 	G$SerialWrite$0$0 ==.
                           00005F   596 	C$ttl.c$49$1_0$9 ==.
                                    597 ;	./src/components/ttl.c:49: void SerialWrite(uint8_t c) {
                                    598 ;	-----------------------------------------
                                    599 ;	 function SerialWrite
                                    600 ;	-----------------------------------------
      00005F                        601 _SerialWrite:
      00005F AF 82            [24]  602 	mov	r7,dpl
                           000061   603 	C$ttl.c$51$1_0$9 ==.
                                    604 ;	./src/components/ttl.c:51: ES = 0;
                                    605 ;	assignBit
      000061 C2 AC            [12]  606 	clr	_ES
                           000063   607 	C$ttl.c$53$1_0$9 ==.
                                    608 ;	./src/components/ttl.c:53: SBUF = c;
      000063 8F 99            [24]  609 	mov	_SBUF,r7
                           000065   610 	C$ttl.c$55$1_0$9 ==.
                                    611 ;	./src/components/ttl.c:55: while (!TI) {
      000065                        612 00101$:
                           000065   613 	C$ttl.c$59$1_0$9 ==.
                                    614 ;	./src/components/ttl.c:59: TI = 0;
                                    615 ;	assignBit
      000065 10 99 02         [24]  616 	jbc	_TI,00114$
      000068 80 FB            [24]  617 	sjmp	00101$
      00006A                        618 00114$:
                           00006A   619 	C$ttl.c$61$1_0$9 ==.
                                    620 ;	./src/components/ttl.c:61: ES = !TI;
      00006A A2 99            [12]  621 	mov	c,_TI
      00006C B3               [12]  622 	cpl	c
      00006D 92 AC            [24]  623 	mov	_ES,c
                           00006F   624 	C$ttl.c$62$1_0$9 ==.
                                    625 ;	./src/components/ttl.c:62: }
                           00006F   626 	C$ttl.c$62$1_0$9 ==.
                           00006F   627 	XG$SerialWrite$0$0 ==.
      00006F 22               [24]  628 	ret
                                    629 ;------------------------------------------------------------
                                    630 ;Allocation info for local variables in function 'SerialPrint'
                                    631 ;------------------------------------------------------------
                                    632 ;s                         Allocated to registers 
                                    633 ;------------------------------------------------------------
                           000070   634 	G$SerialPrint$0$0 ==.
                           000070   635 	C$ttl.c$65$1_0$12 ==.
                                    636 ;	./src/components/ttl.c:65: void SerialPrint(char* s) {
                                    637 ;	-----------------------------------------
                                    638 ;	 function SerialPrint
                                    639 ;	-----------------------------------------
      000070                        640 _SerialPrint:
      000070 AD 82            [24]  641 	mov	r5,dpl
      000072 AE 83            [24]  642 	mov	r6,dph
      000074 AF F0            [24]  643 	mov	r7,b
                           000076   644 	C$ttl.c$67$1_0$12 ==.
                                    645 ;	./src/components/ttl.c:67: while (*s) {
      000076                        646 00101$:
      000076 8D 82            [24]  647 	mov	dpl,r5
      000078 8E 83            [24]  648 	mov	dph,r6
      00007A 8F F0            [24]  649 	mov	b,r7
      00007C 12r00r00         [24]  650 	lcall	__gptrget
      00007F FC               [12]  651 	mov	r4,a
      000080 60 18            [24]  652 	jz	00104$
                           000082   653 	C$ttl.c$68$2_0$13 ==.
                                    654 ;	./src/components/ttl.c:68: SerialWrite(*s++);
      000082 8C 82            [24]  655 	mov	dpl,r4
      000084 0D               [12]  656 	inc	r5
      000085 BD 00 01         [24]  657 	cjne	r5,#0x00,00116$
      000088 0E               [12]  658 	inc	r6
      000089                        659 00116$:
      000089 C0 07            [24]  660 	push	ar7
      00008B C0 06            [24]  661 	push	ar6
      00008D C0 05            [24]  662 	push	ar5
      00008F 12r00r5F         [24]  663 	lcall	_SerialWrite
      000092 D0 05            [24]  664 	pop	ar5
      000094 D0 06            [24]  665 	pop	ar6
      000096 D0 07            [24]  666 	pop	ar7
      000098 80 DC            [24]  667 	sjmp	00101$
      00009A                        668 00104$:
                           00009A   669 	C$ttl.c$70$1_0$12 ==.
                                    670 ;	./src/components/ttl.c:70: }
                           00009A   671 	C$ttl.c$70$1_0$12 ==.
                           00009A   672 	XG$SerialPrint$0$0 ==.
      00009A 22               [24]  673 	ret
                                    674 ;------------------------------------------------------------
                                    675 ;Allocation info for local variables in function 'SerialPrintln'
                                    676 ;------------------------------------------------------------
                                    677 ;s                         Allocated to registers r5 r6 r7 
                                    678 ;------------------------------------------------------------
                           00009B   679 	G$SerialPrintln$0$0 ==.
                           00009B   680 	C$ttl.c$73$1_0$15 ==.
                                    681 ;	./src/components/ttl.c:73: void SerialPrintln(char* s) {
                                    682 ;	-----------------------------------------
                                    683 ;	 function SerialPrintln
                                    684 ;	-----------------------------------------
      00009B                        685 _SerialPrintln:
                           00009B   686 	C$ttl.c$75$1_0$15 ==.
                                    687 ;	./src/components/ttl.c:75: SerialPrint(s);
      00009B 12r00r70         [24]  688 	lcall	_SerialPrint
                           00009E   689 	C$ttl.c$76$1_0$15 ==.
                                    690 ;	./src/components/ttl.c:76: SerialPrint("\r\n");
      00009E 90r00r00         [24]  691 	mov	dptr,#___str_0
      0000A1 75 F0 80         [24]  692 	mov	b,#0x80
      0000A4 12r00r70         [24]  693 	lcall	_SerialPrint
                           0000A7   694 	C$ttl.c$77$1_0$15 ==.
                                    695 ;	./src/components/ttl.c:77: }
                           0000A7   696 	C$ttl.c$77$1_0$15 ==.
                           0000A7   697 	XG$SerialPrintln$0$0 ==.
      0000A7 22               [24]  698 	ret
                                    699 ;------------------------------------------------------------
                                    700 ;Allocation info for local variables in function 'SerialRead'
                                    701 ;------------------------------------------------------------
                           0000A8   702 	G$SerialRead$0$0 ==.
                           0000A8   703 	C$ttl.c$80$1_0$16 ==.
                                    704 ;	./src/components/ttl.c:80: char SerialRead() {
                                    705 ;	-----------------------------------------
                                    706 ;	 function SerialRead
                                    707 ;	-----------------------------------------
      0000A8                        708 _SerialRead:
                           0000A8   709 	C$ttl.c$82$1_0$16 ==.
                                    710 ;	./src/components/ttl.c:82: while (!RI) {
      0000A8                        711 00101$:
                           0000A8   712 	C$ttl.c$86$1_0$16 ==.
                                    713 ;	./src/components/ttl.c:86: RI = 0;
                                    714 ;	assignBit
      0000A8 10 98 02         [24]  715 	jbc	_RI,00114$
      0000AB 80 FB            [24]  716 	sjmp	00101$
      0000AD                        717 00114$:
                           0000AD   718 	C$ttl.c$88$1_0$16 ==.
                                    719 ;	./src/components/ttl.c:88: return SBUF;
      0000AD 85 99 82         [24]  720 	mov	dpl,_SBUF
                           0000B0   721 	C$ttl.c$89$1_0$16 ==.
                                    722 ;	./src/components/ttl.c:89: }
                           0000B0   723 	C$ttl.c$89$1_0$16 ==.
                           0000B0   724 	XG$SerialRead$0$0 ==.
      0000B0 22               [24]  725 	ret
                                    726 ;------------------------------------------------------------
                                    727 ;Allocation info for local variables in function 'SerialAvailable'
                                    728 ;------------------------------------------------------------
                           0000B1   729 	G$SerialAvailable$0$0 ==.
                           0000B1   730 	C$ttl.c$92$1_0$18 ==.
                                    731 ;	./src/components/ttl.c:92: uint8_t SerialAvailable() {
                                    732 ;	-----------------------------------------
                                    733 ;	 function SerialAvailable
                                    734 ;	-----------------------------------------
      0000B1                        735 _SerialAvailable:
                           0000B1   736 	C$ttl.c$94$1_0$18 ==.
                                    737 ;	./src/components/ttl.c:94: return RI;
      0000B1 A2 98            [12]  738 	mov	c,_RI
      0000B3 E4               [12]  739 	clr	a
      0000B4 33               [12]  740 	rlc	a
      0000B5 F5 82            [12]  741 	mov	dpl,a
                           0000B7   742 	C$ttl.c$95$1_0$18 ==.
                                    743 ;	./src/components/ttl.c:95: }
                           0000B7   744 	C$ttl.c$95$1_0$18 ==.
                           0000B7   745 	XG$SerialAvailable$0$0 ==.
      0000B7 22               [24]  746 	ret
                                    747 ;------------------------------------------------------------
                                    748 ;Allocation info for local variables in function 'putchar'
                                    749 ;------------------------------------------------------------
                                    750 ;c                         Allocated to registers r7 
                                    751 ;------------------------------------------------------------
                           0000B8   752 	G$putchar$0$0 ==.
                           0000B8   753 	C$ttl.c$98$1_0$20 ==.
                                    754 ;	./src/components/ttl.c:98: uint8_t putchar(uint8_t c) {
                                    755 ;	-----------------------------------------
                                    756 ;	 function putchar
                                    757 ;	-----------------------------------------
      0000B8                        758 _putchar:
                           0000B8   759 	C$ttl.c$100$1_0$20 ==.
                                    760 ;	./src/components/ttl.c:100: SerialWrite(c);
      0000B8 AF 82            [24]  761 	mov  r7,dpl
      0000BA C0 07            [24]  762 	push	ar7
      0000BC 12r00r5F         [24]  763 	lcall	_SerialWrite
      0000BF D0 07            [24]  764 	pop	ar7
                           0000C1   765 	C$ttl.c$101$1_0$20 ==.
                                    766 ;	./src/components/ttl.c:101: return c;
      0000C1 8F 82            [24]  767 	mov	dpl,r7
                           0000C3   768 	C$ttl.c$102$1_0$20 ==.
                                    769 ;	./src/components/ttl.c:102: }
                           0000C3   770 	C$ttl.c$102$1_0$20 ==.
                           0000C3   771 	XG$putchar$0$0 ==.
      0000C3 22               [24]  772 	ret
                                    773 	.area CSEG    (CODE)
                                    774 	.area CONST   (CODE)
                           000000   775 Fttl$__str_0$0_0$0 == .
                                    776 	.area CONST   (CODE)
      000000                        777 ___str_0:
      000000 0D                     778 	.db 0x0d
      000001 0A                     779 	.db 0x0a
      000002 00                     780 	.db 0x00
                                    781 	.area CSEG    (CODE)
                                    782 	.area XINIT   (CODE)
                                    783 	.area CABS    (ABS,CODE)
